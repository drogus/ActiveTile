ActiveTile is project that aims to implement client side part of displaying many more dots on the map. It aims to be similar to google maps' implementation: http://google-latlong.blogspot.com/2009/02/1000-is-new-10.html

All of the scripts are written for google maps API v3, but porting it to older version is possible. ActiveTile was tested only on firefox 3.5.

The method of displaying such number of points is fairly simple. On the server side you must generate images with dots and display it on client side with ActiveTile.

=== Usage

First of all you need to add new tiles to the map.

    var dotsMap = new activetile.DataMap({
      tilesUrl: "/tile", 
      map: map
    });

The url for tiles is set to "/tile", so all the tiles will be fetched from that url. DataMap will attach arguments with information about current tile to that url, resulting in:
    /tile?lat1=...&lat2=...&lng1=...&lng2=...&zoom=...

where lat1, lat2 and lng1, lng2 are bounds of the tile and zoom is current zoom. With that data you can generate images with points placed on given tile.

Images can be generated with <a href="http://github.com/314Technologies/dotter">Dotter</a>. Dotter is written in ruby. If you are using any other language you will have to roll your own tool.

Once you add this code you can do:
    dotsMap.showTiles()
to display tiles over the map and attach event listeners that will automatically load new tiles on drag or zoom.

To disable tiles:
    dotsMap.removeTiles();

It will remove all tiles from the map and remove all event listeners.

This images provide information about where the dots are, but there is no information about each dot (ie. you can't tell if mouse is over the dot). This is the moment when ActivityLayer is needed. ActivityLayer can add interaction to your tiles, so that there is possibility to display info about each dot on hover or click.

Here is actual implementation of adding activityLayer to the map:

    var activityLayer = new ActivityLayer({
      map: map, 
      mouseOverPoint: function(self, point, center) {
        // mouse is over dot
      }, mouseBeyondPoint: function(self) {
        // mouse is not over dot
    }});

Now you can add activityLayer to DataMap

    dotsMap = new activetile.DataMap({tilesUrl: "/tile", map: map,
      onTilesReload: function() {
        activityLayer.clearPoints();
      },
      onTileLoad: function(tile) {
        points = getPointsOnGivenTile(); //some function that collects points for that tile
        for(var i = 0; i < points.length; i++) {
          activityLayer.addPoint(points[i], tile);
        }
      }
    });

There are two callbacks used here: onTilesReload and onTileLoad.

onTilesReload is called whenever all the tiles are removed or changed (e.g. zoom or manually removing tiles), so it's good to clear also activityLayer with:
  activityLayer.clearPoints();

onTileLoad is called after creating and loading new tile. To ensure that each of the dots displayed on the tile are interactive we must add them to activityLayer.

=== Todo

* add more specs
* project was tested only on firefox 3.5
